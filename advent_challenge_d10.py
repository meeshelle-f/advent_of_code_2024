# -*- coding: utf-8 -*-
"""Advent Challenge D10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11tMcqcwbGi6nzI6ovxfABNcaYG1Nl7Uv
"""

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/Advent 2024/day10/d10_input.txt'

import numpy as np
import pandas as pd

"""#--- Day 10: Hoof It ---

###info

You all arrive at a Lava Production Facility on a floating island in the sky. As the others begin to search the massive industrial complex, you feel a small nose boop your leg and look down to discover a reindeer wearing a hard hat.

The reindeer is holding a book titled "Lava Island Hiking Guide". However, when you open the book, you discover that most of it seems to have been scorched by lava! As you're about to ask how you can help, the reindeer brings you a blank topographic map of the surrounding area (your puzzle input) and looks up at you excitedly.

Perhaps you can help fill in the missing hiking trails?

The topographic map indicates the height at each position using a scale from 0 (lowest) to 9 (highest). For example:

0123
1234
8765
9876
Based on un-scorched scraps of the book, you determine that a good hiking trail is as long as possible and has an even, gradual, uphill slope. For all practical purposes, this means that a hiking trail is any path that starts at height 0, ends at height 9, and always increases by a height of exactly 1 at each step. Hiking trails never include diagonal steps - only up, down, left, or right (from the perspective of the map).

You look up from the map and notice that the reindeer has helpfully begun to construct a small pile of pencils, markers, rulers, compasses, stickers, and other equipment you might need to update the map with hiking trails.

A trailhead is any position that starts one or more hiking trails - here, these positions will always have height 0. Assembling more fragments of pages, you establish that a trailhead's score is the number of 9-height positions reachable from that trailhead via a hiking trail. In the above example, the single trailhead in the top left corner has a score of 1 because it can reach a single 9 (the one in the bottom left).
"""

# This trailhead has a score of 2:
# (The positions marked . are impassable tiles to simplify these examples; they do not appear on your actual topographic map.)

ex_1 = """...0...
...1...
...2...
6543456
7.....7
8.....8
9.....9"""

"""**What is the sum of the scores of all trailheads on your topographic map?**

###Create example function

1. Identify trailheads (0's)
1. For each trailhead identified:
1. Each trailhead num_trails = 0
2. Create 4 directions to go in once trailhead is found
3. Direction must increase by 1 (or is out of bounds)
4. If trail reaches 9 add 1 to the count of the trailhead
"""

# %debug

def find_trailheads(lines): # Identify trailheads (0's)
  trailheads = []
  for i, row in enumerate(lines):
    for j, char in enumerate(row):  # Iterate through characters in the row
      if char == '0':
        trailheads.append((i, j))
  return trailheads


# Check boundaries
def in_bounds(direction):
  i, j = direction
  if i >= 0 and i < len(lines) and j >= 0 and j < len(lines[0]):
    return True
  else:
    return False

# Create 4 directions to go in once trailhead is found
# keep the previous and current value in a dictionary, but only pull the most recent value

def get_directions(trails, lines):
  directions = []
  for trail in trails:
    # print('trails', trails)
    recent_trail_position = trail[-1]
    # print('trail', recent_trail_position)
    i,j = recent_trail_position
    if isinstance(i, int) and isinstance(j, int):  # Check if it's an integer
      right = (i, j+1)
      left = (i, j-1)
      up = (i-1, j)
      down = (i+1, j)

      for direction in [right, left, up, down]:

        if in_bounds(direction):
          new_i, new_j = direction
          new_val = int(lines[new_i][new_j])
          current_val = int(lines[i][j])
          diff = new_val - current_val # Direction must increase by 1 (or is out of bounds)
          if diff == 1:
              # trail.append((direction))
              new_trail = trail + [direction]
              directions.append(new_trail)
  return directions


def identify_trails(lines):
  trailhead_dictionary ={}
  all_directions, start_end_positions = [], [] # add in for 10A

  for trailhead in find_trailheads(lines): # For each trailhead identified
      directions = get_directions([[trailhead]], lines)
      # print('trailhead',[[trailhead]], 'directions', directions)
      trailhead_dictionary[trailhead] = 0
      while len(directions) > 0:
        directions = get_directions(directions, lines)
        # print('trailhead',[[trailhead]], 'directions', directions)

        for direction in directions:
          last_direction = direction[-1]
          new_pos = lines[last_direction[0]][last_direction[1]]

          # if new_pos == '9' and len(direction)==10 and direction not in all_directions:
          #   #part 10A vs 10B
          #   #accidentally solved 10B first
          #   trailhead_dictionary[trailhead] += 1
          #   all_directions.append(direction)

          if new_pos == '9' and len(direction)==10: #10A only requires the start_end of the trailhead to be unique, not the path!
            start_end = (trailhead, last_direction)
            if start_end not in start_end_positions:
              start_end_positions.append(start_end)
              trailhead_dictionary[trailhead] += 1
  return trailhead_dictionary

"""###ex2 modified"""

# This trailhead has a score of 4 because every 9 is reachable via a hiking trail except the one immediately to the left of the trailhead:
ex_2 = """..90..9
...1.98
...2..7
6543456
765.987
876....
987...."""

ex_2_mod = """2290679
7771498
2242497
6543456
7651987
8761111
9871111"""
lines = [str(d) for d in ex_2_mod.split('\n')]
output = identify_trails(lines)
print(len(output.keys()), 'trailheads with sum', sum(output.values()))

"""###ex3 modified"""

# This topographic map contains two trailheads; the trailhead at the top has a score of 1, while the trailhead at the bottom has a score of 2:
ex_3 = """
10..9..
2...8..
3...7..
4567654
...8..3
...9..2
.....01"""

ex_3_mod = """1066911
2444811
3111711
4567654
1118113
3339332
5555501"""

lines = [str(d) for d in ex_3_mod.split('\n')]
output = identify_trails(lines)
print(len(output.keys()), 'trailheads with sum', sum(output.values()))

"""###ex 4"""

# Here's a larger example:
ex_4 = """89010123
78121874
87430965
96549874
45678903
32019012
01329801
10456732"""

#This larger example has 9 trailheads.
#Considering the trailheads in reading order, they have scores of 5, 6, 5, 3, 1, 3, 5, 3, and 5.
#Adding these scores together, the sum of the scores of all trailheads is 36.

# ex_4
lines = [str(d) for d in ex_4.split('\n')]
output = identify_trails(lines)
print(len(output.keys()), 'trailheads with sum', sum(output.values()))

"""###part 1 real"""

with open(file_path,'r') as file:
  lines = file.readlines() #list

for i, line in enumerate(lines):
  lines[i] = line.strip()

output = identify_trails(lines)
print(len(output.keys()), 'trailheads with sum', sum(output.values())) #652

"""#--- Part Two ---

###info

The reindeer spends a few minutes reviewing your hiking trail map before realizing something, disappearing for a few minutes, and finally returning with yet another slightly-charred piece of paper.

The paper describes a second way to measure a trailhead called its rating. A trailhead's rating is the number of distinct hiking trails which begin at that trailhead. For example:
"""

# .....0.
# ..4321.
# ..5..2.
# ..6543.
# ..7..4.
# ..8765.
# ..9....
# The above map has a single trailhead; its rating is 3 because there are exactly three distinct hiking trails which begin at that position:

"""**Update to reflect 10b**"""

def identify_specific_trails(lines):
  trailhead_dictionary ={}
  all_directions, start_end_positions = [], [] # add in for 10A

  for trailhead in find_trailheads(lines): # For each trailhead identified
      directions = get_directions([[trailhead]], lines)
      # print('trailhead',[[trailhead]], 'directions', directions)
      trailhead_dictionary[trailhead] = 0
      while len(directions) > 0:
        directions = get_directions(directions, lines)
        # print('trailhead',[[trailhead]], 'directions', directions)

        for direction in directions:
          last_direction = direction[-1]
          new_pos = lines[last_direction[0]][last_direction[1]]

          if new_pos == '9' and len(direction)==10 and direction not in all_directions:
            #part 10B
            trailhead_dictionary[trailhead] += 1
            all_directions.append(direction)

  return trailhead_dictionary

# Here's the larger example from before:

ex_4 = """89010123
78121874
87430965
96549874
45678903
32019012
01329801
10456732"""

#This larger example has 9 trailheads.
#Considering the trailheads in reading order, they have scores of 5, 6, 5, 3, 1, 3, 5, 3, and 5.
#Adding these scores together, the sum of the scores of all trailheads is 36.

# ex_4
lines = [str(d) for d in ex_4.split('\n')]
output = identify_specific_trails(lines)
print(len(output.keys()), 'trailheads with sum', sum(output.values()))

# Considering its trailheads in reading order, they have ratings of 20, 24, 10, 4, 1, 4, 5, 8, and 5.
# The sum of all trailhead ratings in this larger example topographic map is 81.
# What is the sum of the ratings of all trailheads?

"""##part 2 real"""

with open(file_path,'r') as file:
  lines = file.readlines() #list

for i, line in enumerate(lines):
  lines[i] = line.strip()

output = identify_specific_trails(lines)
print(len(output.keys()), 'trailheads with sum', sum(output.values())) #1432